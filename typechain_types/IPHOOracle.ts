/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface IPHOOracleInterface extends utils.Interface {
  functions: {
    "setPriceUpdateThreshold(uint256)": FunctionFragment;
    "updatePrice()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "setPriceUpdateThreshold" | "updatePrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setPriceUpdateThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "setPriceUpdateThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;

  events: {
    "PriceUpdateThresholdChanged(uint256)": EventFragment;
    "PriceUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "PriceUpdateThresholdChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
}

export interface PriceUpdateThresholdChangedEventObject {
  priceUpdateThreshold: BigNumber;
}
export type PriceUpdateThresholdChangedEvent = TypedEvent<
  [BigNumber],
  PriceUpdateThresholdChangedEventObject
>;

export type PriceUpdateThresholdChangedEventFilter =
  TypedEventFilter<PriceUpdateThresholdChangedEvent>;

export interface PriceUpdatedEventObject {
  latestPHOUSDPrice: BigNumber;
  blockTimestampLast: BigNumber;
}
export type PriceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PriceUpdatedEventObject
>;

export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;

export interface IPHOOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPHOOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setPriceUpdateThreshold(
      _priceUpdateThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  setPriceUpdateThreshold(
    _priceUpdateThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    setPriceUpdateThreshold(
      _priceUpdateThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PriceUpdateThresholdChanged(uint256)"(
      priceUpdateThreshold?: null
    ): PriceUpdateThresholdChangedEventFilter;
    PriceUpdateThresholdChanged(
      priceUpdateThreshold?: null
    ): PriceUpdateThresholdChangedEventFilter;

    "PriceUpdated(uint256,uint256)"(
      latestPHOUSDPrice?: PromiseOrValue<BigNumberish> | null,
      blockTimestampLast?: PromiseOrValue<BigNumberish> | null
    ): PriceUpdatedEventFilter;
    PriceUpdated(
      latestPHOUSDPrice?: PromiseOrValue<BigNumberish> | null,
      blockTimestampLast?: PromiseOrValue<BigNumberish> | null
    ): PriceUpdatedEventFilter;
  };

  estimateGas: {
    setPriceUpdateThreshold(
      _priceUpdateThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setPriceUpdateThreshold(
      _priceUpdateThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
