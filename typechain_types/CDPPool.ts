/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CDPPoolInterface extends utils.Interface {
  functions: {
    "addCollateral(uint256)": FunctionFragment;
    "addCollateralFor(address,uint256)": FunctionFragment;
    "addDebt(uint256)": FunctionFragment;
    "calculateLiquidationFee(uint256)": FunctionFragment;
    "calculateProtocolFee(uint256)": FunctionFragment;
    "cdps(address)": FunctionFragment;
    "close()": FunctionFragment;
    "collateral()": FunctionFragment;
    "collateralToUSD(uint256)": FunctionFragment;
    "computeCR(uint256,uint256)": FunctionFragment;
    "debtToCollateral(uint256)": FunctionFragment;
    "feesCollected()": FunctionFragment;
    "getCollateralUSDTotal()": FunctionFragment;
    "liquidate(address)": FunctionFragment;
    "liquidationCR()": FunctionFragment;
    "minCR()": FunctionFragment;
    "minDebt()": FunctionFragment;
    "moduleManager()": FunctionFragment;
    "open(uint256,uint256)": FunctionFragment;
    "openFor(address,uint256,uint256)": FunctionFragment;
    "pool()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "removeCollateral(uint256)": FunctionFragment;
    "removeCollateralFor(address,uint256)": FunctionFragment;
    "removeDebt(uint256)": FunctionFragment;
    "withdrawFees()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCollateral"
      | "addCollateralFor"
      | "addDebt"
      | "calculateLiquidationFee"
      | "calculateProtocolFee"
      | "cdps"
      | "close"
      | "collateral"
      | "collateralToUSD"
      | "computeCR"
      | "debtToCollateral"
      | "feesCollected"
      | "getCollateralUSDTotal"
      | "liquidate"
      | "liquidationCR"
      | "minCR"
      | "minDebt"
      | "moduleManager"
      | "open"
      | "openFor"
      | "pool"
      | "priceOracle"
      | "protocolFee"
      | "removeCollateral"
      | "removeCollateralFor"
      | "removeDebt"
      | "withdrawFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateralFor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addDebt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateLiquidationFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateProtocolFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cdps",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToUSD",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeCR",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "debtToCollateral",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feesCollected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralUSDTotal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationCR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minCR", values?: undefined): string;
  encodeFunctionData(functionFragment: "minDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "moduleManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "openFor",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateralFor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDebt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateralFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cdps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralToUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "computeCR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "debtToCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesCollected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralUSDTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationCR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minCR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateralFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "Closed(address)": EventFragment;
    "CollateralAdded(address,uint256,uint256)": EventFragment;
    "CollateralRemoved(address,uint256,uint256)": EventFragment;
    "DebtAdded(address,uint256,uint256)": EventFragment;
    "DebtRemoved(address,uint256,uint256)": EventFragment;
    "Liquidated(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Opened(address,uint256,uint256)": EventFragment;
    "WithdrawFees(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Closed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebtAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DebtRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Opened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
}

export interface ClosedEventObject {
  user: string;
}
export type ClosedEvent = TypedEvent<[string], ClosedEventObject>;

export type ClosedEventFilter = TypedEventFilter<ClosedEvent>;

export interface CollateralAddedEventObject {
  user: string;
  addedCollateral: BigNumber;
  collateral: BigNumber;
}
export type CollateralAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CollateralAddedEventObject
>;

export type CollateralAddedEventFilter = TypedEventFilter<CollateralAddedEvent>;

export interface CollateralRemovedEventObject {
  user: string;
  removedCollateral: BigNumber;
  collateralLeft: BigNumber;
}
export type CollateralRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CollateralRemovedEventObject
>;

export type CollateralRemovedEventFilter =
  TypedEventFilter<CollateralRemovedEvent>;

export interface DebtAddedEventObject {
  user: string;
  addedDebt: BigNumber;
  debt: BigNumber;
}
export type DebtAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DebtAddedEventObject
>;

export type DebtAddedEventFilter = TypedEventFilter<DebtAddedEvent>;

export interface DebtRemovedEventObject {
  user: string;
  removedDebt: BigNumber;
  debt: BigNumber;
}
export type DebtRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DebtRemovedEventObject
>;

export type DebtRemovedEventFilter = TypedEventFilter<DebtRemovedEvent>;

export interface LiquidatedEventObject {
  user: string;
  liquidator: string;
  paidToLiquidator: BigNumber;
  debt: BigNumber;
  collateralLiquidated: BigNumber;
  repaidToDebtor: BigNumber;
}
export type LiquidatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidatedEventObject
>;

export type LiquidatedEventFilter = TypedEventFilter<LiquidatedEvent>;

export interface OpenedEventObject {
  user: string;
  debt: BigNumber;
  collateral: BigNumber;
}
export type OpenedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OpenedEventObject
>;

export type OpenedEventFilter = TypedEventFilter<OpenedEvent>;

export interface WithdrawFeesEventObject {
  amountWithdrawn: BigNumber;
}
export type WithdrawFeesEvent = TypedEvent<
  [BigNumber],
  WithdrawFeesEventObject
>;

export type WithdrawFeesEventFilter = TypedEventFilter<WithdrawFeesEvent>;

export interface CDPPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CDPPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCollateral(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addCollateralFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addDebt(
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateLiquidationFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateProtocolFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    cdps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debt: BigNumber; collateral: BigNumber }
    >;

    close(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    collateralToUSD(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeCR(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    debtToCollateral(
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    feesCollected(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCollateralUSDTotal(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidate(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidationCR(overrides?: CallOverrides): Promise<[BigNumber]>;

    minCR(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    moduleManager(overrides?: CallOverrides): Promise<[string]>;

    open(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debt: BigNumber; collateral: BigNumber }
    >;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeCollateral(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeCollateralFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeDebt(
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addCollateral(
    _collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addCollateralFor(
    _user: PromiseOrValue<string>,
    _collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addDebt(
    _debtAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateLiquidationFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateProtocolFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  cdps(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { debt: BigNumber; collateral: BigNumber }
  >;

  close(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collateral(overrides?: CallOverrides): Promise<string>;

  collateralToUSD(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeCR(
    _collateralAmount: PromiseOrValue<BigNumberish>,
    _debtAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  debtToCollateral(
    _debt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feesCollected(overrides?: CallOverrides): Promise<BigNumber>;

  getCollateralUSDTotal(overrides?: CallOverrides): Promise<BigNumber>;

  liquidate(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidationCR(overrides?: CallOverrides): Promise<BigNumber>;

  minCR(overrides?: CallOverrides): Promise<BigNumber>;

  minDebt(overrides?: CallOverrides): Promise<BigNumber>;

  moduleManager(overrides?: CallOverrides): Promise<string>;

  open(
    _collateralAmount: PromiseOrValue<BigNumberish>,
    _debtAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openFor(
    _user: PromiseOrValue<string>,
    _collateralAmount: PromiseOrValue<BigNumberish>,
    _debtAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pool(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { debt: BigNumber; collateral: BigNumber }
  >;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  removeCollateral(
    _collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeCollateralFor(
    _user: PromiseOrValue<string>,
    _collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeDebt(
    _debt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCollateral(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addCollateralFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addDebt(
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateLiquidationFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateProtocolFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    cdps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debt: BigNumber; collateral: BigNumber }
    >;

    close(overrides?: CallOverrides): Promise<void>;

    collateral(overrides?: CallOverrides): Promise<string>;

    collateralToUSD(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeCR(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtToCollateral(
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feesCollected(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralUSDTotal(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationCR(overrides?: CallOverrides): Promise<BigNumber>;

    minCR(overrides?: CallOverrides): Promise<BigNumber>;

    minDebt(overrides?: CallOverrides): Promise<BigNumber>;

    moduleManager(overrides?: CallOverrides): Promise<string>;

    open(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    openFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    pool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debt: BigNumber; collateral: BigNumber }
    >;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeCollateralFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDebt(
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Closed(address)"(user?: PromiseOrValue<string> | null): ClosedEventFilter;
    Closed(user?: PromiseOrValue<string> | null): ClosedEventFilter;

    "CollateralAdded(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      addedCollateral?: null,
      collateral?: null
    ): CollateralAddedEventFilter;
    CollateralAdded(
      user?: PromiseOrValue<string> | null,
      addedCollateral?: null,
      collateral?: null
    ): CollateralAddedEventFilter;

    "CollateralRemoved(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      removedCollateral?: null,
      collateralLeft?: null
    ): CollateralRemovedEventFilter;
    CollateralRemoved(
      user?: PromiseOrValue<string> | null,
      removedCollateral?: null,
      collateralLeft?: null
    ): CollateralRemovedEventFilter;

    "DebtAdded(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      addedDebt?: null,
      debt?: null
    ): DebtAddedEventFilter;
    DebtAdded(
      user?: PromiseOrValue<string> | null,
      addedDebt?: null,
      debt?: null
    ): DebtAddedEventFilter;

    "DebtRemoved(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      removedDebt?: null,
      debt?: null
    ): DebtRemovedEventFilter;
    DebtRemoved(
      user?: PromiseOrValue<string> | null,
      removedDebt?: null,
      debt?: null
    ): DebtRemovedEventFilter;

    "Liquidated(address,address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      paidToLiquidator?: null,
      debt?: null,
      collateralLiquidated?: null,
      repaidToDebtor?: null
    ): LiquidatedEventFilter;
    Liquidated(
      user?: PromiseOrValue<string> | null,
      liquidator?: PromiseOrValue<string> | null,
      paidToLiquidator?: null,
      debt?: null,
      collateralLiquidated?: null,
      repaidToDebtor?: null
    ): LiquidatedEventFilter;

    "Opened(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      debt?: null,
      collateral?: null
    ): OpenedEventFilter;
    Opened(
      user?: PromiseOrValue<string> | null,
      debt?: null,
      collateral?: null
    ): OpenedEventFilter;

    "WithdrawFees(uint256)"(amountWithdrawn?: null): WithdrawFeesEventFilter;
    WithdrawFees(amountWithdrawn?: null): WithdrawFeesEventFilter;
  };

  estimateGas: {
    addCollateral(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addCollateralFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addDebt(
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateLiquidationFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateProtocolFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cdps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    collateralToUSD(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeCR(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    debtToCollateral(
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feesCollected(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateralUSDTotal(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidationCR(overrides?: CallOverrides): Promise<BigNumber>;

    minCR(overrides?: CallOverrides): Promise<BigNumber>;

    minDebt(overrides?: CallOverrides): Promise<BigNumber>;

    moduleManager(overrides?: CallOverrides): Promise<BigNumber>;

    open(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeCollateralFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeDebt(
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCollateral(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addCollateralFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addDebt(
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateLiquidationFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateProtocolFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cdps(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    close(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralToUSD(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeCR(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtToCollateral(
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feesCollected(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateralUSDTotal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidationCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minCR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moduleManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    open(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCollateral(
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateralFor(
      _user: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeDebt(
      _debt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
