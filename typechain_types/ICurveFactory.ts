/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ICurveFactoryInterface extends utils.Interface {
  functions: {
    "deploy_metapool(address,string,string,address,uint256,uint256,uint256)": FunctionFragment;
    "get_base_pool(address)": FunctionFragment;
    "get_coin_indices(address,address,address)": FunctionFragment;
    "get_coins(address)": FunctionFragment;
    "get_meta_n_coins(address)": FunctionFragment;
    "get_underlying_balances(address)": FunctionFragment;
    "get_underlying_coins(address)": FunctionFragment;
    "is_meta(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deploy_metapool"
      | "get_base_pool"
      | "get_coin_indices"
      | "get_coins"
      | "get_meta_n_coins"
      | "get_underlying_balances"
      | "get_underlying_coins"
      | "is_meta"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deploy_metapool",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "get_base_pool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_coin_indices",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "get_coins",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_meta_n_coins",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_underlying_balances",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "get_underlying_coins",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "is_meta",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "deploy_metapool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_base_pool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_coin_indices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_coins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_meta_n_coins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_underlying_balances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_underlying_coins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "is_meta", data: BytesLike): Result;

  events: {};
}

export interface ICurveFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICurveFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deploy_metapool(
      _base_pool: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coin: PromiseOrValue<string>,
      _A: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _implementation_idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    get_base_pool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        outboundIndex: BigNumber;
        phoIndex: BigNumber;
        isUnderlying: boolean;
      }
    >;

    get_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[[string, string]]>;

    get_meta_n_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    get_underlying_balances(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    get_underlying_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    is_meta(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  deploy_metapool(
    _base_pool: PromiseOrValue<string>,
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _coin: PromiseOrValue<string>,
    _A: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    _implementation_idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  get_base_pool(
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  get_coin_indices(
    _pool: PromiseOrValue<string>,
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      outboundIndex: BigNumber;
      phoIndex: BigNumber;
      isUnderlying: boolean;
    }
  >;

  get_coins(
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  get_meta_n_coins(
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  get_underlying_balances(
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  get_underlying_coins(
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  is_meta(
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    deploy_metapool(
      _base_pool: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coin: PromiseOrValue<string>,
      _A: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _implementation_idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    get_base_pool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        outboundIndex: BigNumber;
        phoIndex: BigNumber;
        isUnderlying: boolean;
      }
    >;

    get_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    get_meta_n_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_underlying_balances(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    get_underlying_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    is_meta(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    deploy_metapool(
      _base_pool: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coin: PromiseOrValue<string>,
      _A: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _implementation_idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    get_base_pool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_meta_n_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_underlying_balances(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_underlying_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    is_meta(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deploy_metapool(
      _base_pool: PromiseOrValue<string>,
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _coin: PromiseOrValue<string>,
      _A: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _implementation_idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    get_base_pool(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_coin_indices(
      _pool: PromiseOrValue<string>,
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_meta_n_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_underlying_balances(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get_underlying_coins(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    is_meta(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
