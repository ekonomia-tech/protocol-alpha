/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ModuleManagerInterface extends utils.Interface {
  functions: {
    "PHOGovernance()": FunctionFragment;
    "TONGovernance()": FunctionFragment;
    "addModule(address)": FunctionFragment;
    "burnPHO(address,uint256)": FunctionFragment;
    "deprecateModule(address)": FunctionFragment;
    "executeCeilingUpdate(address)": FunctionFragment;
    "kernel()": FunctionFragment;
    "mintPHO(address,uint256)": FunctionFragment;
    "moduleDelay()": FunctionFragment;
    "modules(address)": FunctionFragment;
    "pauseGuardian()": FunctionFragment;
    "pauseModule(address)": FunctionFragment;
    "setModuleDelay(uint256)": FunctionFragment;
    "setPHOCeilingForModule(address,uint256)": FunctionFragment;
    "setPauseGuardian(address)": FunctionFragment;
    "unpauseModule(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PHOGovernance"
      | "TONGovernance"
      | "addModule"
      | "burnPHO"
      | "deprecateModule"
      | "executeCeilingUpdate"
      | "kernel"
      | "mintPHO"
      | "moduleDelay"
      | "modules"
      | "pauseGuardian"
      | "pauseModule"
      | "setModuleDelay"
      | "setPHOCeilingForModule"
      | "setPauseGuardian"
      | "unpauseModule"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PHOGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TONGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnPHO",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deprecateModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeCeilingUpdate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintPHO",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "modules",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseModule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setModuleDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPHOCeilingForModule",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPauseGuardian",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseModule",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "PHOGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TONGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnPHO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deprecateModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeCeilingUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPHO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moduleDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setModuleDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPHOCeilingForModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPauseGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseModule",
    data: BytesLike
  ): Result;

  events: {
    "ModuleAdded(address)": EventFragment;
    "ModuleBurn(address,address,uint256)": EventFragment;
    "ModuleDeprecated(address)": EventFragment;
    "ModuleMint(address,address,uint256)": EventFragment;
    "ModulePaused(address)": EventFragment;
    "ModuleUnpaused(address)": EventFragment;
    "PHOCeilingUpdateScheduled(address,uint256,uint256)": EventFragment;
    "PHOCeilingUpdated(address,uint256)": EventFragment;
    "PauseGuardianUpdated(address)": EventFragment;
    "UpdatedModuleDelay(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleBurn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleDeprecated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModulePaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PHOCeilingUpdateScheduled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PHOCeilingUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseGuardianUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedModuleDelay"): EventFragment;
}

export interface ModuleAddedEventObject {
  module: string;
}
export type ModuleAddedEvent = TypedEvent<[string], ModuleAddedEventObject>;

export type ModuleAddedEventFilter = TypedEventFilter<ModuleAddedEvent>;

export interface ModuleBurnEventObject {
  module: string;
  from: string;
  amount: BigNumber;
}
export type ModuleBurnEvent = TypedEvent<
  [string, string, BigNumber],
  ModuleBurnEventObject
>;

export type ModuleBurnEventFilter = TypedEventFilter<ModuleBurnEvent>;

export interface ModuleDeprecatedEventObject {
  module: string;
}
export type ModuleDeprecatedEvent = TypedEvent<
  [string],
  ModuleDeprecatedEventObject
>;

export type ModuleDeprecatedEventFilter =
  TypedEventFilter<ModuleDeprecatedEvent>;

export interface ModuleMintEventObject {
  module: string;
  to: string;
  amount: BigNumber;
}
export type ModuleMintEvent = TypedEvent<
  [string, string, BigNumber],
  ModuleMintEventObject
>;

export type ModuleMintEventFilter = TypedEventFilter<ModuleMintEvent>;

export interface ModulePausedEventObject {
  module: string;
}
export type ModulePausedEvent = TypedEvent<[string], ModulePausedEventObject>;

export type ModulePausedEventFilter = TypedEventFilter<ModulePausedEvent>;

export interface ModuleUnpausedEventObject {
  module: string;
}
export type ModuleUnpausedEvent = TypedEvent<
  [string],
  ModuleUnpausedEventObject
>;

export type ModuleUnpausedEventFilter = TypedEventFilter<ModuleUnpausedEvent>;

export interface PHOCeilingUpdateScheduledEventObject {
  module: string;
  upcomingCeiling: BigNumber;
  ceilingUpdateTime: BigNumber;
}
export type PHOCeilingUpdateScheduledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PHOCeilingUpdateScheduledEventObject
>;

export type PHOCeilingUpdateScheduledEventFilter =
  TypedEventFilter<PHOCeilingUpdateScheduledEvent>;

export interface PHOCeilingUpdatedEventObject {
  module: string;
  newPHOCeiling: BigNumber;
}
export type PHOCeilingUpdatedEvent = TypedEvent<
  [string, BigNumber],
  PHOCeilingUpdatedEventObject
>;

export type PHOCeilingUpdatedEventFilter =
  TypedEventFilter<PHOCeilingUpdatedEvent>;

export interface PauseGuardianUpdatedEventObject {
  newPauseGuardian: string;
}
export type PauseGuardianUpdatedEvent = TypedEvent<
  [string],
  PauseGuardianUpdatedEventObject
>;

export type PauseGuardianUpdatedEventFilter =
  TypedEventFilter<PauseGuardianUpdatedEvent>;

export interface UpdatedModuleDelayEventObject {
  newDelay: BigNumber;
}
export type UpdatedModuleDelayEvent = TypedEvent<
  [BigNumber],
  UpdatedModuleDelayEventObject
>;

export type UpdatedModuleDelayEventFilter =
  TypedEventFilter<UpdatedModuleDelayEvent>;

export interface ModuleManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ModuleManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PHOGovernance(overrides?: CallOverrides): Promise<[string]>;

    TONGovernance(overrides?: CallOverrides): Promise<[string]>;

    addModule(
      _newModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnPHO(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deprecateModule(
      _existingModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeCeilingUpdate(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    mintPHO(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moduleDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        phoCeiling: BigNumber;
        upcomingCeiling: BigNumber;
        ceilingUpdateTime: BigNumber;
        phoMinted: BigNumber;
        startTime: BigNumber;
        status: number;
      }
    >;

    pauseGuardian(overrides?: CallOverrides): Promise<[string]>;

    pauseModule(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setModuleDelay(
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPHOCeilingForModule(
      _module: PromiseOrValue<string>,
      _newPHOCeiling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPauseGuardian(
      _pauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseModule(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  PHOGovernance(overrides?: CallOverrides): Promise<string>;

  TONGovernance(overrides?: CallOverrides): Promise<string>;

  addModule(
    _newModule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnPHO(
    _from: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deprecateModule(
    _existingModule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeCeilingUpdate(
    _module: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  kernel(overrides?: CallOverrides): Promise<string>;

  mintPHO(
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moduleDelay(overrides?: CallOverrides): Promise<BigNumber>;

  modules(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
      phoCeiling: BigNumber;
      upcomingCeiling: BigNumber;
      ceilingUpdateTime: BigNumber;
      phoMinted: BigNumber;
      startTime: BigNumber;
      status: number;
    }
  >;

  pauseGuardian(overrides?: CallOverrides): Promise<string>;

  pauseModule(
    _module: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setModuleDelay(
    _newDelay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPHOCeilingForModule(
    _module: PromiseOrValue<string>,
    _newPHOCeiling: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPauseGuardian(
    _pauseGuardian: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseModule(
    _module: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PHOGovernance(overrides?: CallOverrides): Promise<string>;

    TONGovernance(overrides?: CallOverrides): Promise<string>;

    addModule(
      _newModule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnPHO(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deprecateModule(
      _existingModule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeCeilingUpdate(
      _module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    kernel(overrides?: CallOverrides): Promise<string>;

    mintPHO(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    moduleDelay(overrides?: CallOverrides): Promise<BigNumber>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        phoCeiling: BigNumber;
        upcomingCeiling: BigNumber;
        ceilingUpdateTime: BigNumber;
        phoMinted: BigNumber;
        startTime: BigNumber;
        status: number;
      }
    >;

    pauseGuardian(overrides?: CallOverrides): Promise<string>;

    pauseModule(
      _module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setModuleDelay(
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPHOCeilingForModule(
      _module: PromiseOrValue<string>,
      _newPHOCeiling: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPauseGuardian(
      _pauseGuardian: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseModule(
      _module: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ModuleAdded(address)"(
      module?: PromiseOrValue<string> | null
    ): ModuleAddedEventFilter;
    ModuleAdded(module?: PromiseOrValue<string> | null): ModuleAddedEventFilter;

    "ModuleBurn(address,address,uint256)"(
      module?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): ModuleBurnEventFilter;
    ModuleBurn(
      module?: PromiseOrValue<string> | null,
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): ModuleBurnEventFilter;

    "ModuleDeprecated(address)"(
      module?: PromiseOrValue<string> | null
    ): ModuleDeprecatedEventFilter;
    ModuleDeprecated(
      module?: PromiseOrValue<string> | null
    ): ModuleDeprecatedEventFilter;

    "ModuleMint(address,address,uint256)"(
      module?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): ModuleMintEventFilter;
    ModuleMint(
      module?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): ModuleMintEventFilter;

    "ModulePaused(address)"(
      module?: PromiseOrValue<string> | null
    ): ModulePausedEventFilter;
    ModulePaused(
      module?: PromiseOrValue<string> | null
    ): ModulePausedEventFilter;

    "ModuleUnpaused(address)"(
      module?: PromiseOrValue<string> | null
    ): ModuleUnpausedEventFilter;
    ModuleUnpaused(
      module?: PromiseOrValue<string> | null
    ): ModuleUnpausedEventFilter;

    "PHOCeilingUpdateScheduled(address,uint256,uint256)"(
      module?: PromiseOrValue<string> | null,
      upcomingCeiling?: null,
      ceilingUpdateTime?: null
    ): PHOCeilingUpdateScheduledEventFilter;
    PHOCeilingUpdateScheduled(
      module?: PromiseOrValue<string> | null,
      upcomingCeiling?: null,
      ceilingUpdateTime?: null
    ): PHOCeilingUpdateScheduledEventFilter;

    "PHOCeilingUpdated(address,uint256)"(
      module?: PromiseOrValue<string> | null,
      newPHOCeiling?: null
    ): PHOCeilingUpdatedEventFilter;
    PHOCeilingUpdated(
      module?: PromiseOrValue<string> | null,
      newPHOCeiling?: null
    ): PHOCeilingUpdatedEventFilter;

    "PauseGuardianUpdated(address)"(
      newPauseGuardian?: null
    ): PauseGuardianUpdatedEventFilter;
    PauseGuardianUpdated(
      newPauseGuardian?: null
    ): PauseGuardianUpdatedEventFilter;

    "UpdatedModuleDelay(uint256)"(
      newDelay?: null
    ): UpdatedModuleDelayEventFilter;
    UpdatedModuleDelay(newDelay?: null): UpdatedModuleDelayEventFilter;
  };

  estimateGas: {
    PHOGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    TONGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    addModule(
      _newModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnPHO(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deprecateModule(
      _existingModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeCeilingUpdate(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    mintPHO(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moduleDelay(overrides?: CallOverrides): Promise<BigNumber>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pauseGuardian(overrides?: CallOverrides): Promise<BigNumber>;

    pauseModule(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setModuleDelay(
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPHOCeilingForModule(
      _module: PromiseOrValue<string>,
      _newPHOCeiling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPauseGuardian(
      _pauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseModule(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PHOGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TONGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addModule(
      _newModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnPHO(
      _from: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deprecateModule(
      _existingModule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeCeilingUpdate(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintPHO(
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moduleDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pauseGuardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseModule(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setModuleDelay(
      _newDelay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPHOCeilingForModule(
      _module: PromiseOrValue<string>,
      _newPHOCeiling: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPauseGuardian(
      _pauseGuardian: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseModule(
      _module: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
