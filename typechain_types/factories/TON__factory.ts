/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { TON, TONInterface } from "../TON";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "genesis_supply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000de238038062000de28339810160408190526200003491620002c4565b8151829082906200004d90600390602085019062000151565b5080516200006390600490602084019062000151565b50505062000083336a52b7d2dcc80cd2e40000006200008b60201b60201c565b505062000391565b6001600160a01b038216620000e65760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060026000828254620000fa91906200032e565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b8280546200015f9062000355565b90600052602060002090601f016020900481019282620001835760008555620001ce565b82601f106200019e57805160ff1916838001178555620001ce565b82800160010185558215620001ce579182015b82811115620001ce578251825591602001919060010190620001b1565b50620001dc929150620001e0565b5090565b5b80821115620001dc5760008155600101620001e1565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200021f57600080fd5b81516001600160401b03808211156200023c576200023c620001f7565b604051601f8301601f19908116603f01168101908282118183101715620002675762000267620001f7565b816040528381526020925086838588010111156200028457600080fd5b600091505b83821015620002a8578582018301518183018401529082019062000289565b83821115620002ba5760008385830101525b9695505050505050565b60008060408385031215620002d857600080fd5b82516001600160401b0380821115620002f057600080fd5b620002fe868387016200020d565b935060208501519150808211156200031557600080fd5b5062000324858286016200020d565b9150509250929050565b600082198211156200035057634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806200036a57607f821691505b6020821081036200038b57634e487b7160e01b600052602260045260246000fd5b50919050565b610a4180620003a16000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806351e238e31161008c57806395d89b411161006657806395d89b41146101da578063a457c2d7146101e2578063a9059cbb146101f5578063dd62ed3e1461020857600080fd5b806351e238e31461018c57806370a082311461019e57806379cc6790146101c757600080fd5b806323b872dd116100c857806323b872dd14610142578063313ce56714610155578063395093511461016457806342966c681461017757600080fd5b806306fdde03146100ef578063095ea7b31461010d57806318160ddd14610130575b600080fd5b6100f761021b565b6040516101049190610866565b60405180910390f35b61012061011b3660046108d7565b6102ad565b6040519015158152602001610104565b6002545b604051908152602001610104565b610120610150366004610901565b6102c5565b60405160128152602001610104565b6101206101723660046108d7565b6102e9565b61018a61018536600461093d565b61030b565b005b6101346a52b7d2dcc80cd2e400000081565b6101346101ac366004610956565b6001600160a01b031660009081526020819052604090205490565b61018a6101d53660046108d7565b610318565b6100f7610331565b6101206101f03660046108d7565b610340565b6101206102033660046108d7565b6103c0565b610134610216366004610978565b6103ce565b60606003805461022a906109ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610256906109ab565b80156102a35780601f10610278576101008083540402835291602001916102a3565b820191906000526020600020905b81548152906001019060200180831161028657829003601f168201915b5050505050905090565b6000336102bb8185856103f9565b5060019392505050565b6000336102d385828561051e565b6102de858585610598565b506001949350505050565b6000336102bb8185856102fc83836103ce565b61030691906109e5565b6103f9565b610315338261073c565b50565b61032382338361051e565b61032d828261073c565b5050565b60606004805461022a906109ab565b6000338161034e82866103ce565b9050838110156103b35760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102de82868684036103f9565b6000336102bb818585610598565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b03831661045b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103aa565b6001600160a01b0382166104bc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103aa565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061052a84846103ce565b9050600019811461059257818110156105855760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103aa565b61059284848484036103f9565b50505050565b6001600160a01b0383166105fc5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103aa565b6001600160a01b03821661065e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103aa565b6001600160a01b038316600090815260208190526040902054818110156106d65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103aa565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610592565b6001600160a01b03821661079c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103aa565b6001600160a01b038216600090815260208190526040902054818110156108105760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103aa565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610511565b600060208083528351808285015260005b8181101561089357858101830151858201604001528201610877565b818111156108a5576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146108d257600080fd5b919050565b600080604083850312156108ea57600080fd5b6108f3836108bb565b946020939093013593505050565b60008060006060848603121561091657600080fd5b61091f846108bb565b925061092d602085016108bb565b9150604084013590509250925092565b60006020828403121561094f57600080fd5b5035919050565b60006020828403121561096857600080fd5b610971826108bb565b9392505050565b6000806040838503121561098b57600080fd5b610994836108bb565b91506109a2602084016108bb565b90509250929050565b600181811c908216806109bf57607f821691505b6020821081036109df57634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610a0657634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220db22b051bba61baed80db6d073f742518c415b8ac0b0211d35b23d0e5cfb0a9c64736f6c634300080d0033";

type TONConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TONConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TON__factory extends ContractFactory {
  constructor(...args: TONConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TON> {
    return super.deploy(_name, _symbol, overrides || {}) as Promise<TON>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, overrides || {});
  }
  override attach(address: string): TON {
    return super.attach(address) as TON;
  }
  override connect(signer: Signer): TON__factory {
    return super.connect(signer) as TON__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TONInterface {
    return new utils.Interface(_abi) as TONInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TON {
    return new Contract(address, _abi, signerOrProvider) as TON;
  }
}
