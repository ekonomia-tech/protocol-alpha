/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IPriceController,
  IPriceControllerInterface,
} from "../IPriceController";

const _abi = [
  {
    inputs: [],
    name: "CooldownNotSatisfied",
    type: "error",
  },
  {
    inputs: [],
    name: "CooldownPeriodAtLeastOneHour",
    type: "error",
  },
  {
    inputs: [],
    name: "NotEnoughBalanceInStabilizer",
    type: "error",
  },
  {
    inputs: [],
    name: "SameAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "SameValue",
    type: "error",
  },
  {
    inputs: [],
    name: "ValueNotInRange",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroValue",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newCooldownPeriod",
        type: "uint256",
      },
    ],
    name: "CooldownPeriodUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newMaxSlippage",
        type: "uint256",
      },
    ],
    name: "MaxSlippageUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newOracleAddress",
        type: "address",
      },
    ],
    name: "OracleAddressSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newGapFraction",
        type: "uint256",
      },
    ],
    name: "PriceMitigationPercentageUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "dexPool",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "tokenSent",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountSent",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenReceived",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountReceived",
        type: "uint256",
      },
    ],
    name: "TokensExchanged",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "current_price",
        type: "uint256",
      },
    ],
    name: "checkPriceBand",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "diff",
        type: "uint256",
      },
    ],
    name: "marketToTargetDiff",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newCooldownPeriod",
        type: "uint256",
      },
    ],
    name: "setCooldownPeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newMaxSlippage",
        type: "uint256",
      },
    ],
    name: "setMaxSlippage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOracleAddress",
        type: "address",
      },
    ],
    name: "setOracleAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newGapFraction",
        type: "uint256",
      },
    ],
    name: "setPriceMitigationPercentage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stabilize",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IPriceController__factory {
  static readonly abi = _abi;
  static createInterface(): IPriceControllerInterface {
    return new utils.Interface(_abi) as IPriceControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IPriceController {
    return new Contract(address, _abi, signerOrProvider) as IPriceController;
  }
}
