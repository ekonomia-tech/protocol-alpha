/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PriceControllerInterface extends utils.Interface {
  functions: {
    "buyAndBurnPHO(uint256)": FunctionFragment;
    "checkPriceBand(uint256)": FunctionFragment;
    "cooldownPeriod()": FunctionFragment;
    "curveFactory()": FunctionFragment;
    "dexPool()": FunctionFragment;
    "kernel()": FunctionFragment;
    "lastCooldownReset()": FunctionFragment;
    "marketToTargetDiff(uint256,uint256)": FunctionFragment;
    "maxSlippage()": FunctionFragment;
    "mintAndSellPHO(uint256)": FunctionFragment;
    "moduleManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "pho()": FunctionFragment;
    "priceBand()": FunctionFragment;
    "priceMitigationPercentage()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCooldownPeriod(uint256)": FunctionFragment;
    "setMaxSlippage(uint256)": FunctionFragment;
    "setOracleAddress(address)": FunctionFragment;
    "setPriceMitigationPercentage(uint256)": FunctionFragment;
    "stabilize()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "usdc()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyAndBurnPHO"
      | "checkPriceBand"
      | "cooldownPeriod"
      | "curveFactory"
      | "dexPool"
      | "kernel"
      | "lastCooldownReset"
      | "marketToTargetDiff"
      | "maxSlippage"
      | "mintAndSellPHO"
      | "moduleManager"
      | "owner"
      | "pho"
      | "priceBand"
      | "priceMitigationPercentage"
      | "priceOracle"
      | "renounceOwnership"
      | "setCooldownPeriod"
      | "setMaxSlippage"
      | "setOracleAddress"
      | "setPriceMitigationPercentage"
      | "stabilize"
      | "transferOwnership"
      | "usdc"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyAndBurnPHO",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkPriceBand",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curveFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dexPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastCooldownReset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketToTargetDiff",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSlippage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndSellPHO",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "moduleManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pho", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceBand", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceMitigationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSlippage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceMitigationPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "stabilize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "buyAndBurnPHO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPriceBand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastCooldownReset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketToTargetDiff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndSellPHO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moduleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pho", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceBand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceMitigationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceMitigationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stabilize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;

  events: {
    "CooldownPeriodUpdated(uint256)": EventFragment;
    "MaxSlippageUpdated(uint256)": EventFragment;
    "OracleAddressSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceMitigationPercentageUpdated(uint256)": EventFragment;
    "TokensExchanged(address,address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CooldownPeriodUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MaxSlippageUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PriceMitigationPercentageUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensExchanged"): EventFragment;
}

export interface CooldownPeriodUpdatedEventObject {
  newCooldownPeriod: BigNumber;
}
export type CooldownPeriodUpdatedEvent = TypedEvent<
  [BigNumber],
  CooldownPeriodUpdatedEventObject
>;

export type CooldownPeriodUpdatedEventFilter =
  TypedEventFilter<CooldownPeriodUpdatedEvent>;

export interface MaxSlippageUpdatedEventObject {
  newMaxSlippage: BigNumber;
}
export type MaxSlippageUpdatedEvent = TypedEvent<
  [BigNumber],
  MaxSlippageUpdatedEventObject
>;

export type MaxSlippageUpdatedEventFilter =
  TypedEventFilter<MaxSlippageUpdatedEvent>;

export interface OracleAddressSetEventObject {
  newOracleAddress: string;
}
export type OracleAddressSetEvent = TypedEvent<
  [string],
  OracleAddressSetEventObject
>;

export type OracleAddressSetEventFilter =
  TypedEventFilter<OracleAddressSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceMitigationPercentageUpdatedEventObject {
  newGapFraction: BigNumber;
}
export type PriceMitigationPercentageUpdatedEvent = TypedEvent<
  [BigNumber],
  PriceMitigationPercentageUpdatedEventObject
>;

export type PriceMitigationPercentageUpdatedEventFilter =
  TypedEventFilter<PriceMitigationPercentageUpdatedEvent>;

export interface TokensExchangedEventObject {
  dexPool: string;
  tokenSent: string;
  amountSent: BigNumber;
  tokenReceived: string;
  amountReceived: BigNumber;
}
export type TokensExchangedEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber],
  TokensExchangedEventObject
>;

export type TokensExchangedEventFilter = TypedEventFilter<TokensExchangedEvent>;

export interface PriceController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PriceControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyAndBurnPHO(
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkPriceBand(
      current_price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    cooldownPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    curveFactory(overrides?: CallOverrides): Promise<[string]>;

    dexPool(overrides?: CallOverrides): Promise<[string]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    lastCooldownReset(overrides?: CallOverrides): Promise<[BigNumber]>;

    marketToTargetDiff(
      price: PromiseOrValue<BigNumberish>,
      diff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxSlippage(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintAndSellPHO(
      phoAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    moduleManager(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pho(overrides?: CallOverrides): Promise<[string]>;

    priceBand(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceMitigationPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCooldownPeriod(
      newCooldownPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxSlippage(
      newMaxSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleAddress(
      newOracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceMitigationPercentage(
      newPriceMitigationPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stabilize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdc(overrides?: CallOverrides): Promise<[string]>;
  };

  buyAndBurnPHO(
    collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkPriceBand(
    current_price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  curveFactory(overrides?: CallOverrides): Promise<string>;

  dexPool(overrides?: CallOverrides): Promise<string>;

  kernel(overrides?: CallOverrides): Promise<string>;

  lastCooldownReset(overrides?: CallOverrides): Promise<BigNumber>;

  marketToTargetDiff(
    price: PromiseOrValue<BigNumberish>,
    diff: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxSlippage(overrides?: CallOverrides): Promise<BigNumber>;

  mintAndSellPHO(
    phoAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  moduleManager(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pho(overrides?: CallOverrides): Promise<string>;

  priceBand(overrides?: CallOverrides): Promise<BigNumber>;

  priceMitigationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCooldownPeriod(
    newCooldownPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxSlippage(
    newMaxSlippage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleAddress(
    newOracleAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceMitigationPercentage(
    newPriceMitigationPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stabilize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdc(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    buyAndBurnPHO(
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkPriceBand(
      current_price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    curveFactory(overrides?: CallOverrides): Promise<string>;

    dexPool(overrides?: CallOverrides): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    lastCooldownReset(overrides?: CallOverrides): Promise<BigNumber>;

    marketToTargetDiff(
      price: PromiseOrValue<BigNumberish>,
      diff: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    mintAndSellPHO(
      phoAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moduleManager(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pho(overrides?: CallOverrides): Promise<string>;

    priceBand(overrides?: CallOverrides): Promise<BigNumber>;

    priceMitigationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCooldownPeriod(
      newCooldownPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxSlippage(
      newMaxSlippage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleAddress(
      newOracleAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceMitigationPercentage(
      newPriceMitigationPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stabilize(overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    usdc(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CooldownPeriodUpdated(uint256)"(
      newCooldownPeriod?: null
    ): CooldownPeriodUpdatedEventFilter;
    CooldownPeriodUpdated(
      newCooldownPeriod?: null
    ): CooldownPeriodUpdatedEventFilter;

    "MaxSlippageUpdated(uint256)"(
      newMaxSlippage?: null
    ): MaxSlippageUpdatedEventFilter;
    MaxSlippageUpdated(newMaxSlippage?: null): MaxSlippageUpdatedEventFilter;

    "OracleAddressSet(address)"(
      newOracleAddress?: PromiseOrValue<string> | null
    ): OracleAddressSetEventFilter;
    OracleAddressSet(
      newOracleAddress?: PromiseOrValue<string> | null
    ): OracleAddressSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PriceMitigationPercentageUpdated(uint256)"(
      newGapFraction?: null
    ): PriceMitigationPercentageUpdatedEventFilter;
    PriceMitigationPercentageUpdated(
      newGapFraction?: null
    ): PriceMitigationPercentageUpdatedEventFilter;

    "TokensExchanged(address,address,uint256,address,uint256)"(
      dexPool?: PromiseOrValue<string> | null,
      tokenSent?: PromiseOrValue<string> | null,
      amountSent?: null,
      tokenReceived?: null,
      amountReceived?: null
    ): TokensExchangedEventFilter;
    TokensExchanged(
      dexPool?: PromiseOrValue<string> | null,
      tokenSent?: PromiseOrValue<string> | null,
      amountSent?: null,
      tokenReceived?: null,
      amountReceived?: null
    ): TokensExchangedEventFilter;
  };

  estimateGas: {
    buyAndBurnPHO(
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkPriceBand(
      current_price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    curveFactory(overrides?: CallOverrides): Promise<BigNumber>;

    dexPool(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    lastCooldownReset(overrides?: CallOverrides): Promise<BigNumber>;

    marketToTargetDiff(
      price: PromiseOrValue<BigNumberish>,
      diff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxSlippage(overrides?: CallOverrides): Promise<BigNumber>;

    mintAndSellPHO(
      phoAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    moduleManager(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pho(overrides?: CallOverrides): Promise<BigNumber>;

    priceBand(overrides?: CallOverrides): Promise<BigNumber>;

    priceMitigationPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCooldownPeriod(
      newCooldownPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxSlippage(
      newMaxSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleAddress(
      newOracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceMitigationPercentage(
      newPriceMitigationPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stabilize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyAndBurnPHO(
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkPriceBand(
      current_price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cooldownPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curveFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dexPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastCooldownReset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketToTargetDiff(
      price: PromiseOrValue<BigNumberish>,
      diff: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxSlippage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintAndSellPHO(
      phoAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    moduleManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pho(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceBand(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceMitigationPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCooldownPeriod(
      newCooldownPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxSlippage(
      newMaxSlippage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleAddress(
      newOracleAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceMitigationPercentage(
      newPriceMitigationPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stabilize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
