/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PHOTWAPOracleInterface extends utils.Interface {
  functions: {
    "DECIMALS_DIFFERENCE()": FunctionFragment;
    "MAX_PRICE_THRESHOLD()": FunctionFragment;
    "PRICE_PRECISION()": FunctionFragment;
    "UPDATEPRICE_THRESHOLD_PRECISION()": FunctionFragment;
    "dexPool()": FunctionFragment;
    "fraxAddress()": FunctionFragment;
    "fraxBPLP()": FunctionFragment;
    "fraxBPPool()": FunctionFragment;
    "initOracle()": FunctionFragment;
    "latestBlockTimestamp()": FunctionFragment;
    "latestUSDPHOPrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "period()": FunctionFragment;
    "pho()": FunctionFragment;
    "priceCumulativeLast0()": FunctionFragment;
    "priceCumulativeLast1()": FunctionFragment;
    "priceFeeds()": FunctionFragment;
    "priceUpdateThreshold()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPriceUpdateThreshold(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "twap0()": FunctionFragment;
    "twap1()": FunctionFragment;
    "updatePrice()": FunctionFragment;
    "usdcAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DECIMALS_DIFFERENCE"
      | "MAX_PRICE_THRESHOLD"
      | "PRICE_PRECISION"
      | "UPDATEPRICE_THRESHOLD_PRECISION"
      | "dexPool"
      | "fraxAddress"
      | "fraxBPLP"
      | "fraxBPPool"
      | "initOracle"
      | "latestBlockTimestamp"
      | "latestUSDPHOPrice"
      | "owner"
      | "period"
      | "pho"
      | "priceCumulativeLast0"
      | "priceCumulativeLast1"
      | "priceFeeds"
      | "priceUpdateThreshold"
      | "renounceOwnership"
      | "setPriceUpdateThreshold"
      | "transferOwnership"
      | "twap0"
      | "twap1"
      | "updatePrice"
      | "usdcAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DECIMALS_DIFFERENCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PRICE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATEPRICE_THRESHOLD_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dexPool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fraxAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fraxBPLP", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fraxBPPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestUSDPHOPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(functionFragment: "pho", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceCumulativeLast0",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceCumulativeLast1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceUpdateThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceUpdateThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "twap0", values?: undefined): string;
  encodeFunctionData(functionFragment: "twap1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usdcAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DECIMALS_DIFFERENCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PRICE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATEPRICE_THRESHOLD_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dexPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fraxAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fraxBPLP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fraxBPPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestUSDPHOPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pho", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceCumulativeLast0",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceCumulativeLast1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceUpdateThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceUpdateThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twap0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "twap1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usdcAddress",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceUpdateThresholdChanged(uint256)": EventFragment;
    "PriceUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PriceUpdateThresholdChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PriceUpdateThresholdChangedEventObject {
  priceUpdateThreshold: BigNumber;
}
export type PriceUpdateThresholdChangedEvent = TypedEvent<
  [BigNumber],
  PriceUpdateThresholdChangedEventObject
>;

export type PriceUpdateThresholdChangedEventFilter =
  TypedEventFilter<PriceUpdateThresholdChangedEvent>;

export interface PriceUpdatedEventObject {
  latestPHOUSDPrice: BigNumber;
  blockTimestampLast: BigNumber;
}
export type PriceUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PriceUpdatedEventObject
>;

export type PriceUpdatedEventFilter = TypedEventFilter<PriceUpdatedEvent>;

export interface PHOTWAPOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PHOTWAPOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DECIMALS_DIFFERENCE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PRICE_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    UPDATEPRICE_THRESHOLD_PRECISION(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dexPool(overrides?: CallOverrides): Promise<[string]>;

    fraxAddress(overrides?: CallOverrides): Promise<[string]>;

    fraxBPLP(overrides?: CallOverrides): Promise<[string]>;

    fraxBPPool(overrides?: CallOverrides): Promise<[string]>;

    initOracle(overrides?: CallOverrides): Promise<[boolean]>;

    latestBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestUSDPHOPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    period(overrides?: CallOverrides): Promise<[BigNumber]>;

    pho(overrides?: CallOverrides): Promise<[string]>;

    priceCumulativeLast0(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceCumulativeLast1(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceFeeds(overrides?: CallOverrides): Promise<[string]>;

    priceUpdateThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceUpdateThreshold(
      _priceUpdateThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    twap0(overrides?: CallOverrides): Promise<[BigNumber]>;

    twap1(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdcAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  DECIMALS_DIFFERENCE(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PRICE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  UPDATEPRICE_THRESHOLD_PRECISION(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dexPool(overrides?: CallOverrides): Promise<string>;

  fraxAddress(overrides?: CallOverrides): Promise<string>;

  fraxBPLP(overrides?: CallOverrides): Promise<string>;

  fraxBPPool(overrides?: CallOverrides): Promise<string>;

  initOracle(overrides?: CallOverrides): Promise<boolean>;

  latestBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  latestUSDPHOPrice(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  period(overrides?: CallOverrides): Promise<BigNumber>;

  pho(overrides?: CallOverrides): Promise<string>;

  priceCumulativeLast0(overrides?: CallOverrides): Promise<BigNumber>;

  priceCumulativeLast1(overrides?: CallOverrides): Promise<BigNumber>;

  priceFeeds(overrides?: CallOverrides): Promise<string>;

  priceUpdateThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceUpdateThreshold(
    _priceUpdateThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  twap0(overrides?: CallOverrides): Promise<BigNumber>;

  twap1(overrides?: CallOverrides): Promise<BigNumber>;

  updatePrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdcAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DECIMALS_DIFFERENCE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATEPRICE_THRESHOLD_PRECISION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dexPool(overrides?: CallOverrides): Promise<string>;

    fraxAddress(overrides?: CallOverrides): Promise<string>;

    fraxBPLP(overrides?: CallOverrides): Promise<string>;

    fraxBPPool(overrides?: CallOverrides): Promise<string>;

    initOracle(overrides?: CallOverrides): Promise<boolean>;

    latestBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    latestUSDPHOPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    pho(overrides?: CallOverrides): Promise<string>;

    priceCumulativeLast0(overrides?: CallOverrides): Promise<BigNumber>;

    priceCumulativeLast1(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeeds(overrides?: CallOverrides): Promise<string>;

    priceUpdateThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPriceUpdateThreshold(
      _priceUpdateThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    twap0(overrides?: CallOverrides): Promise<BigNumber>;

    twap1(overrides?: CallOverrides): Promise<BigNumber>;

    updatePrice(overrides?: CallOverrides): Promise<BigNumber>;

    usdcAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PriceUpdateThresholdChanged(uint256)"(
      priceUpdateThreshold?: null
    ): PriceUpdateThresholdChangedEventFilter;
    PriceUpdateThresholdChanged(
      priceUpdateThreshold?: null
    ): PriceUpdateThresholdChangedEventFilter;

    "PriceUpdated(uint256,uint256)"(
      latestPHOUSDPrice?: PromiseOrValue<BigNumberish> | null,
      blockTimestampLast?: PromiseOrValue<BigNumberish> | null
    ): PriceUpdatedEventFilter;
    PriceUpdated(
      latestPHOUSDPrice?: PromiseOrValue<BigNumberish> | null,
      blockTimestampLast?: PromiseOrValue<BigNumberish> | null
    ): PriceUpdatedEventFilter;
  };

  estimateGas: {
    DECIMALS_DIFFERENCE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PRICE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATEPRICE_THRESHOLD_PRECISION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dexPool(overrides?: CallOverrides): Promise<BigNumber>;

    fraxAddress(overrides?: CallOverrides): Promise<BigNumber>;

    fraxBPLP(overrides?: CallOverrides): Promise<BigNumber>;

    fraxBPPool(overrides?: CallOverrides): Promise<BigNumber>;

    initOracle(overrides?: CallOverrides): Promise<BigNumber>;

    latestBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    latestUSDPHOPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    pho(overrides?: CallOverrides): Promise<BigNumber>;

    priceCumulativeLast0(overrides?: CallOverrides): Promise<BigNumber>;

    priceCumulativeLast1(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeeds(overrides?: CallOverrides): Promise<BigNumber>;

    priceUpdateThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceUpdateThreshold(
      _priceUpdateThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    twap0(overrides?: CallOverrides): Promise<BigNumber>;

    twap1(overrides?: CallOverrides): Promise<BigNumber>;

    updatePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdcAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DECIMALS_DIFFERENCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PRICE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRICE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPDATEPRICE_THRESHOLD_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dexPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fraxAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fraxBPLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fraxBPPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestUSDPHOPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pho(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceCumulativeLast0(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceCumulativeLast1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeeds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceUpdateThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceUpdateThreshold(
      _priceUpdateThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    twap0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    twap1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdcAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
